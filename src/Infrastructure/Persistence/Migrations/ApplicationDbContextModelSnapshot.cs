// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Assignments.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<decimal>("MaxScore")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("max_score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_assignments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_assignments_course_id");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_courses_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_courses_user_id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Domain.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("Domain.UserGroupRoles.UserGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_group_roles");

                    b.ToTable("user_group_roles", (string)null);
                });

            modelBuilder.Entity("Domain.UserRoles.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("google_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.UsersAssignments.UserAssignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("AssignmentId", "UserId")
                        .HasName("pk_user_assignments");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_user_assignments_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_assignments_user_id");

                    b.ToTable("user_assignments", (string)null);
                });

            modelBuilder.Entity("Domain.UsersGroups.UserGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("UserGroupRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_group_role_id");

                    b.HasKey("GroupId", "UserId")
                        .HasName("pk_user_groups");

                    b.HasIndex("UserGroupRoleId")
                        .HasDatabaseName("ix_user_groups_user_group_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_groups_user_id");

                    b.ToTable("user_groups", (string)null);
                });

            modelBuilder.Entity("Domain.Assignments.Assignment", b =>
                {
                    b.HasOne("Domain.Courses.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Course_CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Courses.Course", b =>
                {
                    b.HasOne("Domain.Groups.Group", "Group")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Group_Course_GroupId");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Course_UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.UserRoles.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User_UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Domain.UsersAssignments.UserAssignment", b =>
                {
                    b.HasOne("Domain.Assignments.Assignment", "Assignment")
                        .WithMany("UserAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserAssignment_Assignment_AssignmentId");

                    b.HasOne("Domain.Statuses.Status", "Status")
                        .WithMany("UserAssignments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserAssignment_Status_StatusId");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("UserAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_UserAssignment_UserId");

                    b.Navigation("Assignment");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UsersGroups.UserGroup", b =>
                {
                    b.HasOne("Domain.Groups.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_Group_GroupId");

                    b.HasOne("Domain.UserGroupRoles.UserGroupRole", "UserGroupRole")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserGroupRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroupRole_UserGroup_UserGroupRoleId");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_User_UserId");

                    b.Navigation("Group");

                    b.Navigation("User");

                    b.Navigation("UserGroupRole");
                });

            modelBuilder.Entity("Domain.Assignments.Assignment", b =>
                {
                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("Domain.Courses.Course", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Domain.Groups.Group", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Domain.Statuses.Status", b =>
                {
                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("Domain.UserGroupRoles.UserGroupRole", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Domain.UserRoles.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserAssignments");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
